/*
 * generated by Xtext
 */
package org.xtext.example.molecule.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.xtext.example.molecule.molecule.*
import com.sun.xml.internal.bind.v2.model.core.*

class MoleculeGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		fsa.generateFile("Atom.java",Atom())
		fsa.generateFile("Molecule.java",Molecule())
		fsa.generateFile("Protein.java",Protein())
		fsa.generateFile("RUN.java",toJavaCode(resource.contents.head as Model))
	}
	
	def Atom()'''
	public class Atom {
		
		private String name;
		private float x;
		private float y;
		private float z;
		
		public void setName (String name){
			this.name = name;
		}
		
		public String getName (){
			return this.name;
		}
		
		public void setX (float x){
			this.x = x;
		}
		
		public float getX (){
			return this.x;
		}
		
		public void setY (float y){
			this.y = y;
		}
		
		public float getY (){
			return this.y;
		}
		
		public void setZ (float z){
			this.z = z;
		}
		
		public float getZ (){
			return this.z;
		}
		
	}
	'''
	
	def Molecule()'''
	import java.util.ArrayList;


	public class Molecule {
		
		private ArrayList<Atom> atoms;
		private String name;
		
		Molecule()
		{
			atoms = new ArrayList<Atom>();
		}
		
		public void setName(String name){
			this.name = name;
		}
		
		public String getName(){
			return this.name;
		}
		
		public void addAtom(Atom a){
			this.atoms.add(a);
		}
		
		public Atom getAtom(int i){
			return this.atoms.get(i);
		}
		
		public int returnSize(){
			return this.atoms.size();
		}
	}
	'''
	
	def Protein()'''
	import java.io.BufferedReader;
	import java.io.File;
	import java.io.FileInputStream;
	import java.io.FileWriter;
	import java.io.IOException;
	import java.io.InputStream;
	import java.io.InputStreamReader;
	import java.io.PrintWriter;
	import java.util.ArrayList;
	import java.util.regex.Matcher;
	import java.util.regex.Pattern;
	
	
	public class Protein {
	
		private String name;
		private ArrayList<Molecule> peptides;
	
		Protein()
		{
			peptides = new ArrayList<Molecule>();
		}
		
		public void setName(String name){
			this.name = name;
		}
		
		public String getName(){
			return this.name;
		}
		
		public Molecule getPeptide(int index){
			return this.peptides.get(index);
		}
		
		public void remove(int x, int y){
			//ArrayList<Molecule> c = (ArrayList<Molecule>) this.peptides.subList(x, y);
			//peptides.remove(c);
			int i;
			//System.out.println(peptides.size());
			for(i=x;i<=y;i++)
			{
				//System.out.println(i);
				peptides.remove(x);
			}
		}
		
		public void addAll(int position,ArrayList<Molecule> a){
			this.peptides.addAll(position,a);
		}
		
		public void addPeptide(Molecule m)
		{
			this.peptides.add(m);
		}
		
		public int returnSize()
		{
			return this.peptides.size();
		}
		
		public void readFile(String path) throws IOException {  
		        File f = new File(path);  
		        InputStream ins = new FileInputStream(f);  
		        InputStreamReader inr = new InputStreamReader(ins);
		        BufferedReader reader = new BufferedReader(inr);
		        
		        int current_num=-1;
		        Molecule m = null;
		        Atom a;
		        
		        Pattern pattern = Pattern.compile("ATOM*");
		        String line = null;
		        while ((line = reader.readLine()) != null){
		        	Matcher matcher = pattern.matcher(line);
		        	if(matcher.find()){
		        		line=line.replaceAll("( )+"," ");
		        		String[] s=line.split(" ");
		        		if(Integer.parseInt(s[5])!=current_num)
		        		{
		        			current_num=Integer.parseInt(s[5]);
		        			a = new Atom();
		        			m = new Molecule();
		        			m.setName(s[3]);
		        			peptides.add(m);
		        			a.setName(s[2]);
		        			a.setX(Float.parseFloat(s[6]));
		        			a.setY(Float.parseFloat(s[7]));
		        			a.setZ(Float.parseFloat(s[8]));
		        			m.addAtom(a);
		        		}
		        		else
		        		{
		        			a = new Atom();
		        			a.setName(s[2]);
		        			a.setX(Float.parseFloat(s[6]));
		        			a.setY(Float.parseFloat(s[7]));
		        			a.setZ(Float.parseFloat(s[8]));
		        			m.addAtom(a);
		        		}
		        	}
		        }
		}
		
		public void dump(String path) throws IOException{
			PrintWriter out = new PrintWriter(new FileWriter(path));
			int i,j,k;
			int count=0;
			Molecule m=null;
			Atom a=null;
			String s,s1;
			int length;
			for(i=0;i<this.peptides.size();i++)
			{
				m = this.peptides.get(i);
				for(j=0;j<this.peptides.get(i).returnSize();j++)
				{
					count+=1;
					a = m.getAtom(j);
					s = "ATOM  ";
					s1=String.valueOf(count);
					length=s1.length();
					for(k=0;k<(5-length);k++)
						s1=" "+s1;
					s=s+s1;
					s=s+" ";
					s1=a.getName();
					length=s1.length();
					for(k=0;k<(4-length);k++)
						s1=s1+" ";
					s=s+s1;
					s=s+" ";
					s1=m.getName();
					s=s+s1;
					s=s+" A";
					s1=String.valueOf(i+1);
					length=s1.length();
					for(k=0;k<(4-length);k++)
						s1=" "+s1;
					s=s+s1;
					s=s+"    ";
					s1=String.valueOf(a.getX());
					length=s1.length();
					for(k=0;k<(8-length);k++)
						s1=" "+s1;
					s=s+s1;s1=String.valueOf(a.getY());
					length=s1.length();
					for(k=0;k<(8-length);k++)
						s1=" "+s1;
					s=s+s1;
					s1=String.valueOf(a.getZ());
					length=s1.length();
					for(k=0;k<(8-length);k++)
						s1=" "+s1;
					s=s+s1;
					out.println(s);
				}
			}
			out.close();
		}
	}
	'''
	
	def toJavaCode(Model m)'''
	import java.io.IOException;
	import java.util.ArrayList;
	
	public class RUN
	{
		public static boolean insertProtein(Protein p1, int x1, int y1, Protein p2, int x2, int y2){
			if((y1-x1)!=(y2-x2))
				return false;
	
			int i;
			
			ArrayList<Molecule> a = new ArrayList<Molecule>();
			for(i=x1-1;i<y1;i++)
				a.add(p1.getPeptide(i));
			p2.remove(x2-1, y2-1);
			p2.addAll(x2-1,a);
			
			return true;
		}
		
		public static Protein combine(Protein p1,Protein p2){
			int i,n;
			Protein p = new Protein();
			
			n=p1.returnSize();
			for(i=0;i<n;i++)
				p.addPeptide(p1.getPeptide(i));
			n=p2.returnSize();
			for(i=0;i<n;i++)
				p.addPeptide(p2.getPeptide(i));
			
			return p;
		}
		
		public static void main(String[] args) throws IOException
		{
			«FOR p:m.proteins»
			«p.declareProtein»
			«ENDFOR»
			«FOR o:m.operations»
			«IF o.type == 'import'»
			«o.Import(o.object3,o.file)»
			«ENDIF»
			«IF o.type == 'dump'»
			«o.Dump(o.object3,o.file)»
			«ENDIF»
			«IF o.type == 'insert'»
			«o.Insert(o.object1,o.start1,o.end1,o.object3,o.start2,o.end2)»
			«ENDIF»
			«IF o.type == 'combine'»
			«o.Combine(o.object1,o.object2,o.object3)»
			«ENDIF»
			«ENDFOR»
			
			System.out.println("Terminated normally.");
		}
	}
	'''
	
	def declareProtein(Protein protein)'''
	Protein «protein.name» = new Protein();
	System.out.println("A protein «protein.name» is declared.");
	'''
	
	def Import(Operation operation,String id,String s)'''
	«id».readFile("«s»");
	System.out.println("Import successfully.");
	'''
	
	def Dump(Operation operation,String id,String s)'''
	«id».dump("«s»");
	System.out.println("Dump PDB file successfully.");
	'''
	
	def Insert(Operation operation,String id1,int start1,int end1,String id2,int start2,int end2)'''
	insertProtein(«id1»,«start1»,«end1»,«id2»,«start2»,«end2»);
	System.out.println("Insert successfully.");
	'''
	
	def Combine(Operation operation,String id1,String id2,String id3)'''
	«id3»=combine(«id1»,«id2»);
	System.out.println("Combine two proteins successfully.");
	'''
}
